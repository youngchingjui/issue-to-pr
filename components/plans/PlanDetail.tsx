import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

interface PlanDetailProps {
  plan: any
  username: string
  repo: string
  issueId: string
}

export default function PlanDetail({ plan, username, repo, issueId }: PlanDetailProps) {
  const [status, setStatus] = useState(plan.status)
  const [loading, setLoading] = useState(false)
  const statusOptions = ["draft", "approved", "implemented"]

  async function handleStatusChange(e: React.ChangeEvent<HTMLSelectElement>) {
    const newStatus = e.target.value
    setLoading(true)
    try {
      const response = await fetch(`/api/plans/${plan.id}`, {
        method: "PATCH",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus })
      })
      if (response.ok) {
        setStatus(newStatus)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex flex-col gap-6 p-4 border rounded-md bg-white">
      <div>
        <h2 className="text-xl font-bold mb-2">Plan Details</h2>
        <div className="flex items-center gap-4 mb-2">
          <Badge variant="secondary">{plan.type || "Plan"}</Badge>
          <span className="text-sm text-muted-foreground">Status:</span>
          <select
            value={status}
            onChange={handleStatusChange}
            disabled={loading}
            className="border rounded p-1 text-sm"
          >
            {statusOptions.map(opt => (
              <option value={opt} key={opt}>{opt}</option>
            ))}
          </select>
        </div>
        <div className="text-xs text-muted-foreground mb-2">
          Created at: {new Date(plan.createdAt).toLocaleString()}
        </div>
      </div>

      <div>
        <h3 className="font-semibold mb-1">Associated Issue</h3>
        {plan.issue ? (
          <Link
            className="hover:underline text-blue-600"
            href={`/${username}/${repo}/issues/${plan.issue.number}`}
          >
            #{plan.issue.number} ({plan.issue.repoFullName})
          </Link>
        ) : (
          <span className="text-sm text-muted-foreground">No issue linked.</span>
        )}
      </div>

      <div>
        <h3 className="font-semibold mb-1">Generated By Workflow</h3>
        {plan.workflow ? (
          <Link
            className="hover:underline text-blue-600"
            href={`/workflow-runs/${plan.workflow.id}`}
          >
            Workflow #{plan.workflow.id}
          </Link>
        ) : (
          <span className="text-sm text-muted-foreground">No workflow linked.</span>
        )}
      </div>

      <div>
        <h3 className="font-semibold mb-1">LLM Response Content</h3>
        <div className="bg-gray-100 p-3 rounded font-mono whitespace-pre-wrap text-sm">
          {plan.message?.data?.content || <span className="text-muted-foreground">No content.</span>}
        </div>
      </div>
    </div>
  )
}
