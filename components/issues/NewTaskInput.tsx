"use client"

import { Loader2, Mic } from "lucide-react"
import { useRouter } from "next/navigation"
import { useCallback, useEffect, useRef, useState, useTransition } from "react"

import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { createIssue } from "@/lib/github/issues"
import { toast } from "@/lib/hooks/use-toast"
import { IssueTitleResponseSchema } from "@/lib/types/api/schemas"
import { RepoFullName } from "@/lib/types/github"

interface Props {
  repoFullName: RepoFullName
}

export default function NewTaskInput({ repoFullName }: Props) {
  const [description, setDescription] = useState("")
  const [loading, setLoading] = useState(false)
  const [generatingTitle, setGeneratingTitle] = useState(false)
  const [isPending, startTransition] = useTransition()

  // Recording related state
  const [isRecording, setIsRecording] = useState(false)
  const [isTranscribing, setIsTranscribing] = useState(false)
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const audioChunks = useRef<Blob[]>([])

  const router = useRouter()

  // Cleanup recorder on unmount
  useEffect(() => {
    return () => {
      mediaRecorder?.stream.getTracks().forEach((t) => t.stop())
    }
  }, [mediaRecorder])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!description.trim()) {
      toast({
        title: "Description required",
        description: "Please enter a description for your task.",
        variant: "destructive",
      })
      return
    }

    // Title will be auto-generated by an agent
    let taskTitle = ""
    try {
      setGeneratingTitle(true)
      const res = await fetch("/api/playground/issue-title", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ description }),
      })
      const data = await res.json()
      const parsedData = IssueTitleResponseSchema.safeParse(data)

      if (!parsedData.success) {
        throw new Error(parsedData.error.message)
      }

      taskTitle = parsedData.data.title.trim()
      if (!taskTitle) throw new Error("Received empty title from agent")
    } catch (err: unknown) {
      toast({
        title: "Error generating title",
        description: String(err),
        variant: "destructive",
      })
      setGeneratingTitle(false)
      return
    } finally {
      setGeneratingTitle(false)
    }

    setLoading(true)
    try {
      startTransition(async () => {
        const res = await createIssue({
          repoFullName,
          title: taskTitle,
          body: description,
        })
        if (res.status === 201) {
          toast({
            title: "Task synced to GitHub",
            description: `Created: ${taskTitle}`,
            variant: "default",
          })
          setDescription("")
          // Refresh the data so the new issue appears in the list immediately
          router.refresh()
        } else {
          toast({
            title: "Error creating task",
            description: res.status || "Failed to create GitHub issue.",
            variant: "destructive",
          })
        }
        setLoading(false)
      })
    } catch (err: unknown) {
      toast({
        title: "Error creating task",
        description: String(err),
        variant: "destructive",
      })
      setLoading(false)
    }
  }

  const isSubmitting = loading || generatingTitle || isPending

  const startRecording = async () => {
    if (!navigator.mediaDevices?.getUserMedia) {
      toast({
        description: "Your browser does not support audio recording.",
        variant: "destructive",
      })
      return
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const recorder = new MediaRecorder(stream)
      recorder.ondataavailable = (e) => {
        if (e.data.size > 0) audioChunks.current.push(e.data)
      }
      recorder.onstop = handleRecordingStop
      recorder.start()
      setMediaRecorder(recorder)
      setIsRecording(true)
    } catch {
      toast({
        description: "Unable to access microphone.",
        variant: "destructive",
      })
    }
  }

  const stopRecording = () => {
    mediaRecorder?.stop()
  }

  const handleRecordingStop = useCallback(async () => {
    setIsRecording(false)
    const blob = new Blob(audioChunks.current, { type: "audio/webm" })
    audioChunks.current = []

    const formData = new FormData()
    formData.append("file", blob, "recording.webm")

    setIsTranscribing(true)
    try {
      const res = await fetch("/api/openai/transcribe", {
        method: "POST",
        body: formData,
      })
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Failed to transcribe")

      const text: string = data.text || ""
      if (text) {
        setDescription((prev) => (prev.trim() ? `${prev}\n${text}` : text))
      }
    } catch (err) {
      toast({ description: String(err), variant: "destructive" })
    } finally {
      setIsTranscribing(false)
    }
  }, [])

  return (
    <form
      onSubmit={handleSubmit}
      className="mb-6 grid gap-4 border-b border-muted pb-6"
    >
      <div className="grid gap-2">
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Describe a task or use the microphone to speak..."
          required
          disabled={isSubmitting}
          rows={3}
        />
      </div>
      <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
        <Button type="submit" disabled={isSubmitting}>
          {generatingTitle ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating issue
              title...
            </>
          ) : loading || isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Creating...
            </>
          ) : (
            "Create Github Issue"
          )}
        </Button>
        <Button
          type="button"
          variant="secondary"
          onClick={isRecording ? stopRecording : startRecording}
          disabled={isSubmitting || isTranscribing}
          className={isRecording ? "animate-pulse" : ""}
          size={isRecording ? undefined : "icon"}
        >
          {isTranscribing ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : isRecording ? (
            <>
              <Mic className="mr-2 h-4 w-4" /> Listening...
            </>
          ) : (
            <Mic className="h-4 w-4" />
          )}
        </Button>
      </div>
    </form>
  )
}

