"use client"

import { HelpCircle, Loader2 } from "lucide-react"
import { useRouter } from "next/navigation"
import { useState, useTransition } from "react"

import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { toast } from "@/lib/hooks/use-toast"
import { IssueTitleResponseSchema } from "@/lib/types/api/schemas"
import { RepoFullName } from "@/lib/types/github"

interface Props {
  repoFullName: RepoFullName
}

export default function NewTaskInput({ repoFullName }: Props) {
  const [description, setDescription] = useState("")
  const [loading, setLoading] = useState(false)
  const [generatingTitle, setGeneratingTitle] = useState(false)
  const [isPending, startTransition] = useTransition()
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!description.trim()) {
      toast({
        title: "Description required",
        description: "Please enter a description for your task.",
        variant: "destructive",
      })
      return
    }

    // Title will be auto-generated by an agent
    let taskTitle = ""
    try {
      setGeneratingTitle(true)
      const res = await fetch("/api/playground/issue-title", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ description }),
      })
      const data = await res.json()
      const parsedData = IssueTitleResponseSchema.safeParse(data)

      if (!parsedData.success) {
        throw new Error(parsedData.error.message)
      }

      taskTitle = parsedData.data.title.trim()
      if (!taskTitle) throw new Error("Received empty title from agent")
    } catch (err: unknown) {
      toast({
        title: "Error generating title",
        description: String(err),
        variant: "destructive",
      })
      setGeneratingTitle(false)
      return
    } finally {
      setGeneratingTitle(false)
    }

    setLoading(true)
    try {
      startTransition(async () => {
        const res = await fetch("/api/tasks", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            repoFullName: repoFullName.fullName,
            title: taskTitle,
            body: description,
          }),
        })
        const data = await res.json()
        if (res.ok && data?.success) {
          toast({
            title: "Task created",
            description: `Created: ${taskTitle}`,
            variant: "default",
          })
          setDescription("")
          router.refresh()
        } else {
          toast({
            title: "Error creating task",
            description: data?.error || "Failed to create task.",
            variant: "destructive",
          })
        }
        setLoading(false)
      })
    } catch (err: unknown) {
      toast({
        title: "Error creating task",
        description: String(err),
        variant: "destructive",
      })
      setLoading(false)
    }
  }

  const isSubmitting = loading || generatingTitle || isPending

  return (
    <form
      onSubmit={handleSubmit}
      className="mb-6 grid gap-4 border-b border-muted pb-6"
    >
      <div className="grid gap-2">
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Describe a task"
          required
          disabled={isSubmitting}
          rows={3}
        />
      </div>
      <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
        <Button type="submit" disabled={isSubmitting}>
          {generatingTitle ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating
              title...
            </>
          ) : loading || isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Creating...
            </>
          ) : (
            "Create Task"
          )}
        </Button>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <HelpCircle className="h-4 w-4 text-muted-foreground/70 cursor-help" />
              </span>
            </TooltipTrigger>
            <TooltipContent>
              Creates a local task stored in Neo4j. You can later sync it to
              GitHub if needed.
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
    </form>
  )
}
