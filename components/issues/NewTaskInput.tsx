"use client"

import { Loader2 } from "lucide-react"
import { useRouter } from "next/navigation"
import { useEffect, useRef, useState, useTransition } from "react"

import VoiceDictationButton from "@/components/common/VoiceDictationButton"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { ToastAction } from "@/components/ui/toast"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { createIssueAction } from "@/lib/actions/createIssue"
import { useHasKeyboard } from "@/lib/hooks/use-has-keyboard"
import { toast } from "@/lib/hooks/use-toast"
import { IssueTitleResponseSchema } from "@/lib/types/api/schemas"
import type { RepoFullName } from "@/lib/types/github"
import { mapGithubErrorToCopy } from "@/lib/ui/errorMessages"

interface Props {
  repoFullName: RepoFullName | null
  issuesEnabled?: boolean
}

export default function NewTaskInput({
  repoFullName,
  issuesEnabled = true,
}: Props) {
  const [description, setDescription] = useState("")
  const [loading, setLoading] = useState(false)
  const [generatingTitle, setGeneratingTitle] = useState(false)
  // useTransition is useful for UI updates (e.g. router.refresh).
  // We should NOT perform remote/network work inside the transition callback
  // because any thrown error will escape the surrounding try/catch resulting
  // in an unhandled runtime error. Instead we do the async work first and
  // then transition the UI update.
  const [isPending, startTransition] = useTransition()

  const router = useRouter()
  const formRef = useRef<HTMLFormElement>(null)
  const [isMac, setIsMac] = useState(false)
  const hasKeyboard = useHasKeyboard()

  // Detect OS to adjust keyboard shortcut hint and behavior
  useEffect(() => {
    if (typeof window === "undefined") return
    const ua = window.navigator.userAgent || ""
    const platform =
      (window.navigator as unknown as { platform?: string }).platform || ""
    setIsMac(/mac/i.test(ua) || /mac/i.test(platform))
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!repoFullName) {
      toast({
        title: "No repository selected",
        description: "Please select a repository to create an issue.",
        variant: "destructive",
      })
      return
    }

    if (!issuesEnabled) {
      const { owner, repo } = repoFullName
      toast({
        title: "Issues are disabled",
        description: (
          <span>
            GitHub Issues are disabled for this repository.{" "}
            <a
              href={`https://github.com/${owner}/${repo}/settings#features`}
              target="_blank"
              rel="noopener noreferrer"
              className="underline"
            >
              Enable in GitHub settings
            </a>
            .
          </span>
        ),
        variant: "destructive",
      })
      return
    }

    if (!description.trim()) {
      toast({
        title: "Description required",
        description: "Please enter a description for your task.",
        variant: "destructive",
      })
      return
    }

    // Title will be auto-generated by an agent
    let taskTitle = ""
    try {
      setGeneratingTitle(true)
      const res = await fetch("/api/playground/issue-title", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ description }),
      })
      const data = await res.json()
      const parsedData = IssueTitleResponseSchema.safeParse(data)

      if (!parsedData.success) {
        throw new Error(parsedData.error.message)
      }

      taskTitle = parsedData.data.title.trim()
      if (!taskTitle) throw new Error("Received empty title from agent")
    } catch (err: unknown) {
      toast({
        title: "Error generating title",
        description: String(err),
        variant: "destructive",
      })
      setGeneratingTitle(false)
      return
    } finally {
      setGeneratingTitle(false)
    }

    setLoading(true)

    const { repo, owner } = repoFullName
    try {
      const result = await createIssueAction({
        repo,
        owner,
        title: taskTitle,
        body: description,
      })

      if (result.status === "success") {
        toast({
          title: "Task synced to GitHub",
          description: `Created: ${taskTitle}`,
          variant: "default",
        })
        setDescription("")
        startTransition(() => {
          router.refresh()
        })
      } else {
        const message = mapGithubErrorToCopy(result)
        const descriptionNode =
          result.code === "IssuesDisabled" ? (
            <span>
              {message}{" "}
              <a
                href={`https://github.com/${owner}/${repo}/settings#features`}
                target="_blank"
                rel="noopener noreferrer"
                className="underline"
              >
                Open GitHub settings
              </a>
              .
            </span>
          ) : (
            message
          )

        toast({
          title: "Error creating task",
          description: descriptionNode,
          variant: "destructive",
          action: <ToastAction altText="Dismiss">Dismiss</ToastAction>,
        })
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : String(err)
      toast({
        title: "Error creating task",
        description: message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const isSubmitting = loading || generatingTitle || isPending
  const isDisabled = isSubmitting || !issuesEnabled

  const tooltipMessage = !issuesEnabled
    ? "Issues are disabled for this repository. Enable them in GitHub settings."
    : undefined

  const shortcutHint = isMac ? "âŒ˜ + Enter" : "Ctrl + Enter"

  const handleKeyDown: React.KeyboardEventHandler<HTMLTextAreaElement> = (
    e
  ) => {
    const isSubmitCombo =
      e.key === "Enter" && ((isMac && e.metaKey) || (!isMac && e.ctrlKey))
    if (isSubmitCombo) {
      e.preventDefault()
      // Trigger form submission which uses the existing submit handler
      formRef.current?.requestSubmit()
    }
  }

  return (
    <TooltipProvider>
      <form
        onSubmit={handleSubmit}
        ref={formRef}
        className="mb-6 grid gap-4 border-b border-muted pb-6"
      >
        <div className="grid gap-2">
          <Tooltip open={!issuesEnabled ? undefined : false}>
            <TooltipTrigger asChild>
              <div>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder={
                    !issuesEnabled
                      ? "Issues are disabled for this repository. Enable them in GitHub settings."
                      : "Describe a task or use the microphone to speak..."
                  }
                  required
                  disabled={isDisabled}
                  // Height tweaks: 50% viewport on mobile, 40% on md+ screens
                  className="h-[50vh] md:h-[40vh]"
                />
              </div>
            </TooltipTrigger>
            {!issuesEnabled && tooltipMessage ? (
              <TooltipContent>{tooltipMessage}</TooltipContent>
            ) : null}
          </Tooltip>
        </div>
        <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
          <Tooltip open={!issuesEnabled ? undefined : false}>
            <TooltipTrigger asChild>
              <div>
                <Button type="submit" disabled={isDisabled}>
                  {generatingTitle ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />{" "}
                      Generating issue title...
                    </>
                  ) : loading || isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />{" "}
                      Creating...
                    </>
                  ) : (
                    <>
                      Create GitHub Issue
                      {hasKeyboard && (
                        <span className="ml-2 text-xs text-primary-foreground">
                          {shortcutHint}
                        </span>
                      )}
                    </>
                  )}
                </Button>
              </div>
            </TooltipTrigger>
            {!issuesEnabled && tooltipMessage ? (
              <TooltipContent>{tooltipMessage}</TooltipContent>
            ) : null}
          </Tooltip>

          <VoiceDictationButton
            onTranscribed={(text) =>
              setDescription((prev) =>
                prev.trim() ? `${prev}\n${text}` : text
              )
            }
            disabled={isDisabled}
          />
        </div>
      </form>
    </TooltipProvider>
  )
}

