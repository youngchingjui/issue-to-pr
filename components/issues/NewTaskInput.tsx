"use client"

import { Loader2, Mic } from "lucide-react"
import { useRouter } from "next/navigation"
import { useState, useTransition } from "react"

import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { createIssue } from "@/lib/github/issues"
import { toast } from "@/lib/hooks/use-toast"
import { useVoiceDictation } from "@/lib/hooks/use-voice-dictation"
import { IssueTitleResponseSchema } from "@/lib/types/api/schemas"
import { RepoFullName } from "@/lib/types/github"

interface Props {
  repoFullName: RepoFullName | null
}

export default function NewTaskInput({ repoFullName }: Props) {
  const [description, setDescription] = useState("")
  const [loading, setLoading] = useState(false)
  const [generatingTitle, setGeneratingTitle] = useState(false)
  // useTransition is useful for UI updates (e.g. router.refresh).
  // We should NOT perform remote/network work inside the transition callback
  // because any thrown error will escape the surrounding try/catch resulting
  // in an unhandled runtime error. Instead we do the async work first and
  // then transition the UI update.
  const [isPending, startTransition] = useTransition()

  const router = useRouter()

  const { isRecording, isTranscribing, startRecording, stopRecording } =
    useVoiceDictation({
      onTranscribed: (text) =>
        setDescription((prev) => (prev.trim() ? `${prev}\n${text}` : text)),
    })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!repoFullName) {
      toast({
        title: "No repository selected",
        description: "Please select a repository to create an issue.",
        variant: "destructive",
      })
      return
    }

    if (!description.trim()) {
      toast({
        title: "Description required",
        description: "Please enter a description for your task.",
        variant: "destructive",
      })
      return
    }

    // Title will be auto-generated by an agent
    let taskTitle = ""
    try {
      setGeneratingTitle(true)
      const res = await fetch("/api/playground/issue-title", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ description }),
      })
      const data = await res.json()
      const parsedData = IssueTitleResponseSchema.safeParse(data)

      if (!parsedData.success) {
        throw new Error(parsedData.error.message)
      }

      taskTitle = parsedData.data.title.trim()
      if (!taskTitle) throw new Error("Received empty title from agent")
    } catch (err: unknown) {
      toast({
        title: "Error generating title",
        description: String(err),
        variant: "destructive",
      })
      setGeneratingTitle(false)
      return
    } finally {
      setGeneratingTitle(false)
    }

    setLoading(true)

    const { repo, owner } = repoFullName
    try {
      // 1️⃣ Perform the async GitHub call outside of startTransition so
      //     errors are captured by this try/catch.
      const res = await createIssue({
        repo,
        owner,
        title: taskTitle,
        body: description,
      })

      if (res.status === 201) {
        toast({
          title: "Task synced to GitHub",
          description: `Created: ${taskTitle}`,
          variant: "default",
        })
        setDescription("")
        // 2️⃣ Then transition any UI updates (like router.refresh) that can be
        //     deferred without blocking user feedback.
        startTransition(() => {
          router.refresh()
        })
      } else {
        toast({
          title: "Error creating task",
          description: res.status || "Failed to create GitHub issue.",
          variant: "destructive",
        })
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : String(err)
      toast({
        title: "Error creating task",
        description: message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const isSubmitting = loading || generatingTitle || isPending

  return (
    <form
      onSubmit={handleSubmit}
      className="mb-6 grid gap-4 border-b border-muted pb-6"
    >
      <div className="grid gap-2">
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Describe a task or use the microphone to speak..."
          required
          disabled={isSubmitting}
          // Height tweaks: 50% viewport on mobile, 40% on md+ screens
          className="h-[50vh] md:h-[40vh]"
        />
      </div>
      <div className="flex flex-wrap items-center gap-x-4 gap-y-2">
        <Button type="submit" disabled={isSubmitting}>
          {generatingTitle ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating
              issue title...
            </>
          ) : loading || isPending ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Creating...
            </>
          ) : (
            "Create Github Issue"
          )}
        </Button>
        <Button
          type="button"
          variant="secondary"
          onClick={isRecording ? stopRecording : startRecording}
          disabled={isSubmitting || isTranscribing}
          className={isRecording ? "animate-pulse" : ""}
          size={isRecording ? undefined : "icon"}
        >
          {isTranscribing ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : isRecording ? (
            <>
              <Mic className="mr-2 h-4 w-4" /> Listening...
            </>
          ) : (
            <Mic className="h-4 w-4" />
          )}
        </Button>
      </div>
    </form>
  )
}

